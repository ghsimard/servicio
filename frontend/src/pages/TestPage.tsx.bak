import React, { useState } from 'react';
import { Box, Typography, TextField, Button, Card, CardContent, Grid, MenuItem, Select, FormControl, InputLabel, CircularProgress } from '@mui/material';

interface ServiceData {
  service_id: string;
  name_en: string;
  name_fr: string;
  name_es: string;
}

const TestPage: React.FC = () => {
  const [services, setServices] = useState<ServiceData[]>([]);
  const [searchQuery, setSearchQuery] = useState('');
  const [language, setLanguage] = useState('en');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [responseTime, setResponseTime] = useState(0);

  const fetchServices = async () => {
    setLoading(true);
    setError('');
    
    const startTime = performance.now();
    
    try {
      const response = await fetch(`http://localhost:3005/api/services/search?query=${searchQuery}&lang=${language}`);
      const data = await response.json();
      
      const endTime = performance.now();
      setResponseTime(endTime - startTime);
      
      if (response.ok) {
        setServices(data.services || []);
      } else {
        setError(data.message || 'An error occurred');
      }
    } catch (err: unknown) {
      // Error is captured but not used directly
      setError('Failed to connect to the server');
    } finally {
      setLoading(false);
    }
  };

  return (
    <Box sx={{ p: 3, maxWidth: 1200, mx: 'auto' }}>
      <Typography variant="h4" gutterBottom>
        API Testing Page
      </Typography>
      
      <Card sx={{ mb: 4 }}>
        <CardContent>
          <Typography variant="h5" gutterBottom>
            Services Search
          </Typography>
          
          <Grid container spacing={2} alignItems="center">
            <Grid item xs={12} sm={5}>
              <TextField
                fullWidth
                label="Search Query"
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                variant="outlined"
              />
            </Grid>
            
            <Grid item xs={12} sm={3}>
              <FormControl fullWidth>
                <InputLabel>Language</InputLabel>
                <Select
                  value={language}
                  label="Language"
                  onChange={(e) => setLanguage(e.target.value)}
                >
                  <MenuItem value="en">English</MenuItem>
                  <MenuItem value="fr">French</MenuItem>
                  <MenuItem value="es">Spanish</MenuItem>
                </Select>
              </FormControl>
            </Grid>
            
            <Grid item xs={12} sm={4}>
              <Button 
                variant="contained" 
                onClick={fetchServices}
                disabled={loading}
                fullWidth
              >
                {loading ? <CircularProgress size={24} /> : 'Search Services'}
              </Button>
            </Grid>
          </Grid>
          
          {error && (
            <Typography color="error" sx={{ mt: 2 }}>
              Error: {error}
            </Typography>
          )}
          
          {responseTime > 0 && (
            <Typography variant="body2" sx={{ mt: 1 }}>
              Response time: {responseTime.toFixed(2)}ms
            </Typography>
          )}
        </CardContent>
      </Card>
      
      <Typography variant="h5" gutterBottom>
        Results ({services.length})
      </Typography>
      
      <Grid container spacing={2}>
        {services.map((service) => (
          <Grid item xs={12} sm={6} md={4} key={service.service_id}>
            <Card>
              <CardContent>
                <Typography variant="h6" component="div">
                  {service.name_en}
                </Typography>
                <Typography color="text.secondary">
                  FR: {service.name_fr}
                </Typography>
                <Typography color="text.secondary">
                  ES: {service.name_es}
                </Typography>
                <Typography variant="caption" display="block">
                  ID: {service.service_id}
                </Typography>
              </CardContent>
            </Card>
          </Grid>
        ))}
      </Grid>
      
      {services.length === 0 && !loading && (
        <Typography color="text.secondary" sx={{ py: 4, textAlign: 'center' }}>
          No services found. Try adjusting your search.
        </Typography>
      )}
    </Box>
  );
};

export default TestPage; 