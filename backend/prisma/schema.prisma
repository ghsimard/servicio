// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum UserRole {
  USER
  HELPER
  ADMIN
}

enum ServiceStatus {
  ACTIVE
  INACTIVE
  PENDING_REVIEW
}

enum BookingStatus {
  PENDING
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

// Base Models
model User {
  id            String    @id @default(uuid()) @db.Uuid
  email         String    @unique
  password      String
  role          UserRole  @default(USER)
  firstName     String
  lastName      String
  phone         String?
  isVerified    Boolean   @default(false)
  profileImage  String?
  bio          String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Helper specific fields
  helperProfile     HelperProfile?
  // Relations
  addresses         Address[]
  bookingsAsNeeder  Booking[]       @relation("needer")
  bookingsAsHelper  Booking[]       @relation("helper")
  reviews          Review[]        @relation("reviewer")
  reviewsReceived  Review[]        @relation("reviewed")
  messages         Message[]
  notifications    Notification[]

  @@map("users")
}

model HelperProfile {
  id                String    @id @default(uuid()) @db.Uuid
  userId            String    @unique @db.Uuid
  user              User      @relation(fields: [userId], references: [id])
  businessName      String?
  yearsExperience   Int?
  languages         String[]
  certifications    String[]
  availability      Json?     // Store availability schedule as JSON
  rating            Float?    @default(0)
  isAvailable       Boolean   @default(true)
  services          Service[]
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  @@map("helper_profiles")
}

model Service {
  id              String         @id @default(uuid()) @db.Uuid
  name            String
  description     String
  category        String
  price           Decimal        @db.Decimal(10, 2)
  duration        Int            // Duration in minutes
  status          ServiceStatus  @default(PENDING_REVIEW)
  helperId        String         @db.Uuid
  helperProfile   HelperProfile  @relation(fields: [helperId], references: [id])
  bookings        Booking[]
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  @@map("services")
}

model Booking {
  id              String        @id @default(uuid()) @db.Uuid
  neederId        String        @db.Uuid
  needer          User          @relation("needer", fields: [neederId], references: [id])
  helperId        String        @db.Uuid
  helper          User          @relation("helper", fields: [helperId], references: [id])
  serviceId       String        @db.Uuid
  service         Service       @relation(fields: [serviceId], references: [id])
  status          BookingStatus @default(PENDING)
  startTime       DateTime
  endTime         DateTime
  totalPrice      Decimal       @db.Decimal(10, 2)
  addressId       String?       @db.Uuid
  address         Address?      @relation(fields: [addressId], references: [id])
  payment         Payment?
  review          Review?
  messages        Message[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@map("bookings")
}

model Address {
  id          String    @id @default(uuid()) @db.Uuid
  userId      String    @db.Uuid
  user        User      @relation(fields: [userId], references: [id])
  street      String
  city        String
  state       String
  postalCode  String
  country     String
  latitude    Float?
  longitude   Float?
  isPrimary   Boolean   @default(false)
  bookings    Booking[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("addresses")
}

model Payment {
  id            String        @id @default(uuid()) @db.Uuid
  bookingId     String        @unique @db.Uuid
  booking       Booking       @relation(fields: [bookingId], references: [id])
  amount        Decimal       @db.Decimal(10, 2)
  status        PaymentStatus @default(PENDING)
  paymentMethod String?
  transactionId String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@map("payments")
}

model Review {
  id          String    @id @default(uuid()) @db.Uuid
  bookingId   String    @unique @db.Uuid
  booking     Booking   @relation(fields: [bookingId], references: [id])
  reviewerId  String    @db.Uuid
  reviewer    User      @relation("reviewer", fields: [reviewerId], references: [id])
  reviewedId  String    @db.Uuid
  reviewed    User      @relation("reviewed", fields: [reviewedId], references: [id])
  rating      Int
  comment     String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("reviews")
}

model Message {
  id          String    @id @default(uuid()) @db.Uuid
  bookingId   String    @db.Uuid
  booking     Booking   @relation(fields: [bookingId], references: [id])
  senderId    String    @db.Uuid
  sender      User      @relation(fields: [senderId], references: [id])
  content     String
  isRead      Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("messages")
}

model Notification {
  id          String    @id @default(uuid()) @db.Uuid
  userId      String    @db.Uuid
  user        User      @relation(fields: [userId], references: [id])
  type        String
  title       String
  message     String
  isRead      Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("notifications")
}
