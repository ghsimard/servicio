{"version":3,"sources":["../../src/logging/logging.controller.ts"],"sourcesContent":["import {\n  Body,\n  Controller,\n  Post,\n  Req,\n  UseGuards,\n  Logger\n} from '@nestjs/common';\nimport { LoggingService } from './logging.service';\nimport { JwtAuthGuard } from '../auth/guards/jwt-auth.guard';\nimport { Request } from 'express';\n\ninterface TrackActionDto {\n  pageVisited: string;\n  actionType: string;\n  actionData?: any;\n  sessionId: string;\n  source?: string;\n}\n\ninterface CreateSessionDto {\n  source?: string;\n}\n\ninterface EndSessionDto {\n  sessionId: string;\n  source?: string;\n}\n\ninterface RequestWithUser extends Request {\n  user: {\n    userId: string;\n    email: string;\n    roles: string[];\n  }\n}\n\n@Controller('logging')\nexport class LoggingController {\n  private readonly logger = new Logger(LoggingController.name);\n\n  constructor(private readonly loggingService: LoggingService) {}\n\n  @Post('track-action')\n  @UseGuards(JwtAuthGuard)\n  async trackAction(@Body() data: TrackActionDto, @Req() req: RequestWithUser) {\n    this.logger.debug(`Tracking action: ${data.actionType} on page ${data.pageVisited} for session ${data.sessionId}`);\n    \n    return this.loggingService.trackUserAction(\n      req.user.userId,\n      data.sessionId,\n      data.pageVisited,\n      data.actionType,\n      data.actionData,\n      data.source\n    );\n  }\n\n  @Post('create-session')\n  @UseGuards(JwtAuthGuard)\n  async createSession(@Body() data: CreateSessionDto, @Req() req: RequestWithUser) {\n    const userId = req.user.userId;\n    \n    // Debug the user object and token\n    this.logger.debug('JWT user payload:', req.user);\n    this.logger.debug(`Creating session for user ID: ${userId} with source: ${data.source || 'not specified'}`);\n    \n    const sessionType = 'web';\n    return this.loggingService.createUserSession(\n      userId, \n      req, \n      sessionType,\n      data.source\n    );\n  }\n\n  @Post('end-session')\n  @UseGuards(JwtAuthGuard)\n  async endSession(@Body() data: EndSessionDto, @Req() req: RequestWithUser) {\n    const userId = req.user.userId;\n    this.logger.debug(`Ending session ${data.sessionId} for user ${userId}`);\n    return this.loggingService.endUserSession(userId, data.sessionId);\n  }\n} "],"names":["LoggingController","trackAction","data","req","logger","debug","actionType","pageVisited","sessionId","loggingService","trackUserAction","user","userId","actionData","source","createSession","sessionType","createUserSession","endSession","endUserSession","constructor","Logger","name"],"mappings":";;;;+BAsCaA;;;eAAAA;;;wBA/BN;gCACwB;8BACF;;;;;;;;;;;;;;;AA6BtB,IAAA,AAAMA,oBAAN,MAAMA;IAKX,MAEMC,YAAY,AAAQC,IAAoB,EAAE,AAAOC,GAAoB,EAAE;QAC3E,IAAI,CAACC,MAAM,CAACC,KAAK,CAAC,CAAC,iBAAiB,EAAEH,KAAKI,UAAU,CAAC,SAAS,EAAEJ,KAAKK,WAAW,CAAC,aAAa,EAAEL,KAAKM,SAAS,EAAE;QAEjH,OAAO,IAAI,CAACC,cAAc,CAACC,eAAe,CACxCP,IAAIQ,IAAI,CAACC,MAAM,EACfV,KAAKM,SAAS,EACdN,KAAKK,WAAW,EAChBL,KAAKI,UAAU,EACfJ,KAAKW,UAAU,EACfX,KAAKY,MAAM;IAEf;IAEA,MAEMC,cAAc,AAAQb,IAAsB,EAAE,AAAOC,GAAoB,EAAE;QAC/E,MAAMS,SAAST,IAAIQ,IAAI,CAACC,MAAM;QAE9B,kCAAkC;QAClC,IAAI,CAACR,MAAM,CAACC,KAAK,CAAC,qBAAqBF,IAAIQ,IAAI;QAC/C,IAAI,CAACP,MAAM,CAACC,KAAK,CAAC,CAAC,8BAA8B,EAAEO,OAAO,cAAc,EAAEV,KAAKY,MAAM,IAAI,iBAAiB;QAE1G,MAAME,cAAc;QACpB,OAAO,IAAI,CAACP,cAAc,CAACQ,iBAAiB,CAC1CL,QACAT,KACAa,aACAd,KAAKY,MAAM;IAEf;IAEA,MAEMI,WAAW,AAAQhB,IAAmB,EAAE,AAAOC,GAAoB,EAAE;QACzE,MAAMS,SAAST,IAAIQ,IAAI,CAACC,MAAM;QAC9B,IAAI,CAACR,MAAM,CAACC,KAAK,CAAC,CAAC,eAAe,EAAEH,KAAKM,SAAS,CAAC,UAAU,EAAEI,QAAQ;QACvE,OAAO,IAAI,CAACH,cAAc,CAACU,cAAc,CAACP,QAAQV,KAAKM,SAAS;IAClE;IAzCAY,YAAY,AAAiBX,cAA8B,CAAE;aAAhCA,iBAAAA;aAFZL,SAAS,IAAIiB,cAAM,CAACrB,kBAAkBsB,IAAI;IAEG;AA0ChE"}