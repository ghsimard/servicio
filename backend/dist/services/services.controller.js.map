{"version":3,"sources":["../../src/services/services.controller.ts"],"sourcesContent":["import { Controller, Get, Query, HttpException, HttpStatus, Logger } from '@nestjs/common';\nimport { ServicesService, SearchServicesResponse } from './services.service';\nimport { ApiTags, ApiOperation, ApiQuery, ApiResponse } from '@nestjs/swagger';\n\n@ApiTags('services')\n@Controller('services')\nexport class ServicesController {\n  private readonly logger = new Logger(ServicesController.name);\n\n  constructor(private readonly servicesService: ServicesService) {}\n\n  @Get('search')\n  @ApiOperation({ summary: 'Search services by name with optional language filter' })\n  @ApiQuery({ name: 'query', required: false, description: 'Search query string' })\n  @ApiQuery({ name: 'q', required: false, description: 'Alternative search parameter (backward compatibility)' })\n  @ApiQuery({ name: 'lang', required: false, description: 'Language code (en, fr, es)', enum: ['en', 'fr', 'es'] })\n  @ApiResponse({ status: 200, description: 'List of services matching the search criteria' })\n  @ApiResponse({ status: 500, description: 'Internal server error' })\n  async searchServices(\n    @Query('query') mainQuery: string,\n    @Query('q') altQuery: string,\n    @Query('lang') lang: string = 'en'\n  ): Promise<SearchServicesResponse> {\n    // Use either query parameter, with mainQuery taking precedence\n    const query = mainQuery || altQuery || '';\n    this.logger.log(`Searching services with query: ${query}, language: ${lang}`);\n    try {\n      const results = await this.servicesService.searchServices(query, lang);\n      this.logger.log(`Found ${results.services.length} services`);\n      return results;\n    } catch (error) {\n      this.logger.error('Error searching services:', error);\n      throw new HttpException(\n        error.message || 'Internal server error',\n        error.status || HttpStatus.INTERNAL_SERVER_ERROR\n      );\n    }\n  }\n} "],"names":["ServicesController","searchServices","mainQuery","altQuery","lang","query","logger","log","results","servicesService","services","length","error","HttpException","message","status","HttpStatus","INTERNAL_SERVER_ERROR","constructor","Logger","name","summary","required","description","enum"],"mappings":";;;;+BAMaA;;;eAAAA;;;wBAN6D;iCAClB;yBACK;;;;;;;;;;;;;;;AAItD,IAAA,AAAMA,qBAAN,MAAMA;IAKX,MAOMC,eACJ,AAAgBC,SAAiB,EACjC,AAAYC,QAAgB,EAC5B,AAAeC,OAAe,IAAI,EACD;QACjC,+DAA+D;QAC/D,MAAMC,QAAQH,aAAaC,YAAY;QACvC,IAAI,CAACG,MAAM,CAACC,GAAG,CAAC,CAAC,+BAA+B,EAAEF,MAAM,YAAY,EAAED,MAAM;QAC5E,IAAI;YACF,MAAMI,UAAU,MAAM,IAAI,CAACC,eAAe,CAACR,cAAc,CAACI,OAAOD;YACjE,IAAI,CAACE,MAAM,CAACC,GAAG,CAAC,CAAC,MAAM,EAAEC,QAAQE,QAAQ,CAACC,MAAM,CAAC,SAAS,CAAC;YAC3D,OAAOH;QACT,EAAE,OAAOI,OAAO;YACd,IAAI,CAACN,MAAM,CAACM,KAAK,CAAC,6BAA6BA;YAC/C,MAAM,IAAIC,qBAAa,CACrBD,MAAME,OAAO,IAAI,yBACjBF,MAAMG,MAAM,IAAIC,kBAAU,CAACC,qBAAqB;QAEpD;IACF;IA5BAC,YAAY,AAAiBT,eAAgC,CAAE;aAAlCA,kBAAAA;aAFZH,SAAS,IAAIa,cAAM,CAACnB,mBAAmBoB,IAAI;IAEI;AA6BlE;;;;QA1BkBC,SAAS;;;QACbD,MAAM;QAASE,UAAU;QAAOC,aAAa;;;QAC7CH,MAAM;QAAKE,UAAU;QAAOC,aAAa;;;QACzCH,MAAM;QAAQE,UAAU;QAAOC,aAAa;QAA8BC,MAAM;YAAC;YAAM;YAAM;SAAK;;;QAC/FT,QAAQ;QAAKQ,aAAa;;;QAC1BR,QAAQ;QAAKQ,aAAa"}