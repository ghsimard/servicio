{"version":3,"sources":["../../src/services/services.service.ts"],"sourcesContent":["import {\n  Injectable,\n  InternalServerErrorException,\n  Logger,\n} from '@nestjs/common';\nimport { PrismaService } from '../prisma/prisma.service';\nimport { Prisma } from '@prisma/client';\n\n// Using the database schema with name_en, name_fr, and name_es fields\nexport interface SearchServicesResponse {\n  services: Array<{\n    service_id: string;\n    name_en: string;\n    name_fr: string | null;\n    name_es: string | null;\n  }>;\n}\n\n@Injectable()\nexport class ServicesService {\n  private readonly logger = new Logger(ServicesService.name);\n\n  constructor(private prisma: PrismaService) {}\n\n  async searchServices(\n    query: string,\n    lang: string = 'en',\n  ): Promise<SearchServicesResponse> {\n    try {\n      // Ensure query is a string, default to empty string if undefined\n      const searchQuery = query || '';\n      // Validate language parameter\n      const validLanguage = ['en', 'fr', 'es'].includes(lang) ? lang : 'en';\n\n      this.logger.log(\n        `Searching services with query: \"${searchQuery}\", language: ${validLanguage}`,\n      );\n\n      if (!this.prisma?.service) {\n        throw new InternalServerErrorException(\n          'Prisma service is not initialized',\n        );\n      }\n\n      // Create the where condition based on the language\n      const whereCondition: Prisma.ServiceWhereInput = {\n        is_active: true,\n      };\n\n      // Search in the appropriate language field\n      if (validLanguage === 'en') {\n        whereCondition.name_en = {\n          contains: searchQuery,\n          mode: 'insensitive',\n        };\n      } else if (validLanguage === 'fr') {\n        whereCondition.name_fr = {\n          contains: searchQuery,\n          mode: 'insensitive',\n        };\n      } else if (validLanguage === 'es') {\n        whereCondition.name_es = {\n          contains: searchQuery,\n          mode: 'insensitive',\n        };\n      }\n\n      const results = await this.prisma.service.findMany({\n        where: whereCondition,\n        select: {\n          service_id: true,\n          name_en: true,\n          name_fr: true,\n          name_es: true,\n        },\n        orderBy: {\n          // Order by the appropriate language field\n          ...(validLanguage === 'en'\n            ? { name_en: 'asc' }\n            : validLanguage === 'fr'\n            ? { name_fr: 'asc' }\n            : { name_es: 'asc' }),\n        },\n      });\n\n      if (!Array.isArray(results)) {\n        throw new InternalServerErrorException(\n          'Invalid response from database',\n        );\n      }\n\n      this.logger.log(\n        `Found ${results.length} services matching query \"${searchQuery}\" in language ${validLanguage}`,\n      );\n\n      return {\n        services: results,\n      };\n    } catch (error) {\n      this.logger.error('Error searching services:', error);\n\n      if (error instanceof Prisma.PrismaClientKnownRequestError) {\n        this.logger.error(\n          `Database error code: ${error.code}, message: ${error.message}`,\n        );\n        throw new InternalServerErrorException(\n          `Database error: ${error.message}`,\n        );\n      }\n\n      if (error instanceof Prisma.PrismaClientInitializationError) {\n        this.logger.error('Database connection error:', error.message);\n        throw new InternalServerErrorException('Database connection error');\n      }\n\n      throw new InternalServerErrorException('Error searching services');\n    }\n  }\n}\n"],"names":["ServicesService","searchServices","query","lang","searchQuery","validLanguage","includes","logger","log","prisma","service","InternalServerErrorException","whereCondition","is_active","name_en","contains","mode","name_fr","name_es","results","findMany","where","select","service_id","orderBy","Array","isArray","length","services","error","Prisma","PrismaClientKnownRequestError","code","message","PrismaClientInitializationError","constructor","Logger","name"],"mappings":";;;;+BAmBaA;;;eAAAA;;;wBAfN;+BACuB;wBACP;;;;;;;;;;AAahB,IAAA,AAAMA,kBAAN,MAAMA;IAKX,MAAMC,eACJC,KAAa,EACbC,OAAe,IAAI,EACc;QACjC,IAAI;YACF,iEAAiE;YACjE,MAAMC,cAAcF,SAAS;YAC7B,8BAA8B;YAC9B,MAAMG,gBAAgB;gBAAC;gBAAM;gBAAM;aAAK,CAACC,QAAQ,CAACH,QAAQA,OAAO;YAEjE,IAAI,CAACI,MAAM,CAACC,GAAG,CACb,CAAC,gCAAgC,EAAEJ,YAAY,aAAa,EAAEC,eAAe;YAG/E,IAAI,CAAC,IAAI,CAACI,MAAM,EAAEC,SAAS;gBACzB,MAAM,IAAIC,oCAA4B,CACpC;YAEJ;YAEA,mDAAmD;YACnD,MAAMC,iBAA2C;gBAC/CC,WAAW;YACb;YAEA,2CAA2C;YAC3C,IAAIR,kBAAkB,MAAM;gBAC1BO,eAAeE,OAAO,GAAG;oBACvBC,UAAUX;oBACVY,MAAM;gBACR;YACF,OAAO,IAAIX,kBAAkB,MAAM;gBACjCO,eAAeK,OAAO,GAAG;oBACvBF,UAAUX;oBACVY,MAAM;gBACR;YACF,OAAO,IAAIX,kBAAkB,MAAM;gBACjCO,eAAeM,OAAO,GAAG;oBACvBH,UAAUX;oBACVY,MAAM;gBACR;YACF;YAEA,MAAMG,UAAU,MAAM,IAAI,CAACV,MAAM,CAACC,OAAO,CAACU,QAAQ,CAAC;gBACjDC,OAAOT;gBACPU,QAAQ;oBACNC,YAAY;oBACZT,SAAS;oBACTG,SAAS;oBACTC,SAAS;gBACX;gBACAM,SAAS;oBACP,0CAA0C;oBAC1C,GAAInB,kBAAkB,OAClB;wBAAES,SAAS;oBAAM,IACjBT,kBAAkB,OAClB;wBAAEY,SAAS;oBAAM,IACjB;wBAAEC,SAAS;oBAAM,CAAC;gBACxB;YACF;YAEA,IAAI,CAACO,MAAMC,OAAO,CAACP,UAAU;gBAC3B,MAAM,IAAIR,oCAA4B,CACpC;YAEJ;YAEA,IAAI,CAACJ,MAAM,CAACC,GAAG,CACb,CAAC,MAAM,EAAEW,QAAQQ,MAAM,CAAC,0BAA0B,EAAEvB,YAAY,cAAc,EAAEC,eAAe;YAGjG,OAAO;gBACLuB,UAAUT;YACZ;QACF,EAAE,OAAOU,OAAO;YACd,IAAI,CAACtB,MAAM,CAACsB,KAAK,CAAC,6BAA6BA;YAE/C,IAAIA,iBAAiBC,cAAM,CAACC,6BAA6B,EAAE;gBACzD,IAAI,CAACxB,MAAM,CAACsB,KAAK,CACf,CAAC,qBAAqB,EAAEA,MAAMG,IAAI,CAAC,WAAW,EAAEH,MAAMI,OAAO,EAAE;gBAEjE,MAAM,IAAItB,oCAA4B,CACpC,CAAC,gBAAgB,EAAEkB,MAAMI,OAAO,EAAE;YAEtC;YAEA,IAAIJ,iBAAiBC,cAAM,CAACI,+BAA+B,EAAE;gBAC3D,IAAI,CAAC3B,MAAM,CAACsB,KAAK,CAAC,8BAA8BA,MAAMI,OAAO;gBAC7D,MAAM,IAAItB,oCAA4B,CAAC;YACzC;YAEA,MAAM,IAAIA,oCAA4B,CAAC;QACzC;IACF;IA/FAwB,YAAY,AAAQ1B,MAAqB,CAAE;aAAvBA,SAAAA;aAFHF,SAAS,IAAI6B,cAAM,CAACpC,gBAAgBqC,IAAI;IAEb;AAgG9C"}