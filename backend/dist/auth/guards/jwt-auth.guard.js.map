{"version":3,"sources":["../../../src/auth/guards/jwt-auth.guard.ts"],"sourcesContent":["import { Injectable, CanActivate, ExecutionContext, UnauthorizedException } from '@nestjs/common';\nimport { JwtStrategy } from '../strategies/jwt.strategy';\nimport { Request } from 'express';\n\ninterface RequestWithUser extends Request {\n  user?: {\n    userId: string;\n    email: string;\n  };\n}\n\n@Injectable()\nexport class JwtAuthGuard implements CanActivate {\n  constructor(private jwtStrategy: JwtStrategy) {}\n\n  async canActivate(context: ExecutionContext): Promise<boolean> {\n    const request = context.switchToHttp().getRequest<RequestWithUser>();\n    const authHeader = request.headers.authorization;\n    \n    if (!authHeader || typeof authHeader !== 'string' || !authHeader.startsWith('Bearer ')) {\n      throw new UnauthorizedException('Missing or invalid authorization token');\n    }\n\n    const token = authHeader.substring(7); // Remove \"Bearer \" prefix\n    const user = this.jwtStrategy.validate(token);\n    \n    if (!user) {\n      throw new UnauthorizedException('Invalid token');\n    }\n    \n    // Add user to request object\n    request.user = user;\n    return true;\n  }\n} "],"names":["JwtAuthGuard","canActivate","context","request","switchToHttp","getRequest","authHeader","headers","authorization","startsWith","UnauthorizedException","token","substring","user","jwtStrategy","validate","constructor"],"mappings":";;;;+BAYaA;;;eAAAA;;;wBAZoE;6BACrD;;;;;;;;;;AAWrB,IAAA,AAAMA,eAAN,MAAMA;IAGX,MAAMC,YAAYC,OAAyB,EAAoB;QAC7D,MAAMC,UAAUD,QAAQE,YAAY,GAAGC,UAAU;QACjD,MAAMC,aAAaH,QAAQI,OAAO,CAACC,aAAa;QAEhD,IAAI,CAACF,cAAc,OAAOA,eAAe,YAAY,CAACA,WAAWG,UAAU,CAAC,YAAY;YACtF,MAAM,IAAIC,6BAAqB,CAAC;QAClC;QAEA,MAAMC,QAAQL,WAAWM,SAAS,CAAC,IAAI,0BAA0B;QACjE,MAAMC,OAAO,IAAI,CAACC,WAAW,CAACC,QAAQ,CAACJ;QAEvC,IAAI,CAACE,MAAM;YACT,MAAM,IAAIH,6BAAqB,CAAC;QAClC;QAEA,6BAA6B;QAC7BP,QAAQU,IAAI,GAAGA;QACf,OAAO;IACT;IApBAG,YAAY,AAAQF,WAAwB,CAAE;aAA1BA,cAAAA;IAA2B;AAqBjD"}