{"version":3,"sources":["../../../src/auth/strategies/jwt.strategy.ts"],"sourcesContent":["import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { JwtService } from '@nestjs/jwt';\n\ninterface JwtPayload {\n  sub: string;\n  email: string;\n  roles?: string[];\n}\n\n@Injectable()\nexport class JwtStrategy {\n  constructor(\n    private configService: ConfigService,\n    private jwtService: JwtService,\n  ) {}\n\n  /**\n   * Validates a JWT token\n   * @param token JWT token to validate\n   * @returns User data extracted from the token or null on validation failure\n   */\n  validate(token: string) {\n    try {\n      const payload = this.jwtService.verify<JwtPayload>(token, {\n        secret: this.configService.get<string>('JWT_SECRET'),\n      });\n      \n      return { \n        userId: payload.sub,\n        email: payload.email,\n      };\n    } catch {\n      return null;\n    }\n  }\n} "],"names":["JwtStrategy","validate","token","payload","jwtService","verify","secret","configService","get","userId","sub","email","constructor"],"mappings":";;;;+BAWaA;;;eAAAA;;;wBAXc;wBACG;qBACH;;;;;;;;;;AASpB,IAAA,AAAMA,cAAN,MAAMA;IAMX;;;;GAIC,GACDC,SAASC,KAAa,EAAE;QACtB,IAAI;YACF,MAAMC,UAAU,IAAI,CAACC,UAAU,CAACC,MAAM,CAAaH,OAAO;gBACxDI,QAAQ,IAAI,CAACC,aAAa,CAACC,GAAG,CAAS;YACzC;YAEA,OAAO;gBACLC,QAAQN,QAAQO,GAAG;gBACnBC,OAAOR,QAAQQ,KAAK;YACtB;QACF,EAAE,OAAM;YACN,OAAO;QACT;IACF;IAvBAC,YACE,AAAQL,aAA4B,EACpC,AAAQH,UAAsB,CAC9B;aAFQG,gBAAAA;aACAH,aAAAA;IACP;AAqBL"}