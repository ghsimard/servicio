{"version":3,"sources":["../../src/auth/auth.controller.ts"],"sourcesContent":["import { \n  Controller, \n  Post, \n  Body, \n  Get,\n  Query,\n  BadRequestException,\n  Logger\n} from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { ApiTags, ApiOperation, ApiResponse, ApiProperty } from '@nestjs/swagger';\nimport { IsEmail, IsNotEmpty, IsString, MinLength, IsOptional, IsDateString } from 'class-validator';\n\nclass RegisterDto {\n  @ApiProperty({ example: 'John Doe', description: 'User full name' })\n  @IsString()\n  @IsNotEmpty()\n  name: string;\n  \n  @ApiProperty({ example: 'Mr', description: 'User title', required: false })\n  @IsString()\n  @IsOptional()\n  title?: string;\n\n  @ApiProperty({ example: 'male', description: 'User gender', required: false })\n  @IsString()\n  @IsOptional()\n  gender?: string;\n  \n  @ApiProperty({ example: 'John', description: 'User first name', required: false })\n  @IsString()\n  @IsOptional()\n  firstname?: string;\n\n  @ApiProperty({ example: 'Doe', description: 'User last name', required: false })\n  @IsString()\n  @IsOptional()\n  lastname?: string;\n\n  @ApiProperty({ example: 'Smith', description: 'User second last name', required: false })\n  @IsString()\n  @IsOptional()\n  lastname2?: string;\n\n  @ApiProperty({ example: '1990-01-01', description: 'User date of birth', required: false })\n  @IsDateString()\n  @IsOptional()\n  dob?: string;\n\n  @ApiProperty({ example: 'user@example.com', description: 'User email address' })\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  @ApiProperty({ example: 'password123', description: 'User password' })\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(8)\n  password: string;\n}\n\nclass LoginDto {\n  @ApiProperty({ example: 'user@example.com', description: 'User email address' })\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  @ApiProperty({ example: 'password123', description: 'User password' })\n  @IsString()\n  @IsNotEmpty()\n  password: string;\n}\n\n@ApiTags('auth')\n@Controller('auth')\nexport class AuthController {\n  private readonly logger = new Logger(AuthController.name);\n  \n  constructor(private readonly authService: AuthService) {}\n\n  @ApiOperation({ summary: 'Register a new user' })\n  @ApiResponse({ \n    status: 201, \n    description: 'User successfully registered',\n    schema: {\n      example: {\n        userId: 'e7c8f8f0-d5b9-4dc7-a8b2-f9f0d5b9dc7a',\n        message: 'User registered successfully',\n        accessToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...',\n      }\n    }\n  })\n  @ApiResponse({ status: 400, description: 'Email already in use' })\n  @Post('register')\n  async register(@Body() registerDto: RegisterDto) {\n    this.logger.log(`Registration attempt with email: ${registerDto.email}`);\n    \n    try {\n      return await this.authService.register(\n        registerDto.email,\n        registerDto.password,\n        registerDto.name,\n        {\n          title: registerDto.title,\n          gender: registerDto.gender,\n          firstname: registerDto.firstname,\n          lastname: registerDto.lastname,\n          lastname2: registerDto.lastname2,\n          dob: registerDto.dob ? new Date(registerDto.dob) : undefined,\n        }\n      );\n    } catch (error) {\n      this.logger.error(`Registration error: ${error.message}`, error.stack);\n      throw new BadRequestException(error.message);\n    }\n  }\n\n  @ApiOperation({ summary: 'Login with email and password' })\n  @ApiResponse({ \n    status: 200, \n    description: 'Login successful',\n    schema: {\n      example: {\n        accessToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...',\n        user: {\n          id: 'e7c8f8f0-d5b9-4dc7-a8b2-f9f0d5b9dc7a',\n          email: 'user@example.com',\n          username: 'user123',\n        }\n      }\n    }\n  })\n  @ApiResponse({ status: 401, description: 'Invalid credentials' })\n  @Post('login')\n  async login(@Body() loginDto: LoginDto) {\n    this.logger.log(`Login attempt with email: ${loginDto.email}`);\n    \n    if (!loginDto.email || !loginDto.password) {\n      throw new BadRequestException('Email and password are required');\n    }\n    \n    return this.authService.login(loginDto.email, loginDto.password);\n  }\n\n  @ApiOperation({ summary: 'Verify user email' })\n  @ApiResponse({ \n    status: 200, \n    description: 'Email verified successfully',\n    schema: {\n      example: {\n        message: 'Email verified successfully'\n      }\n    }\n  })\n  @ApiResponse({ status: 400, description: 'Invalid verification token' })\n  @Get('verify')\n  async verifyEmail(@Query('token') token: string) {\n    if (!token) {\n      throw new BadRequestException('Verification token is required');\n    }\n    \n    return this.authService.verifyEmail(token);\n  }\n\n  @Post('forgot-password')\n  @ApiOperation({ summary: 'Request password reset' })\n  @ApiResponse({ \n    status: 200, \n    description: 'Password reset instructions sent',\n    schema: {\n      example: {\n        message: 'Password reset instructions have been sent to your email'\n      }\n    }\n  })\n  async forgotPassword(@Body('email') email: string) {\n    if (!email) {\n      throw new BadRequestException('Email is required');\n    }\n    return this.authService.requestPasswordReset(email);\n  }\n\n  @Post('reset-password')\n  @ApiOperation({ summary: 'Reset password using token' })\n  @ApiResponse({ \n    status: 200, \n    description: 'Password reset successful',\n    schema: {\n      example: {\n        message: 'Password has been reset successfully'\n      }\n    }\n  })\n  @ApiResponse({ status: 400, description: 'Invalid or expired reset token' })\n  async resetPassword(\n    @Body('token') token: string,\n    @Body('newPassword') newPassword: string,\n  ) {\n    if (!token || !newPassword) {\n      throw new BadRequestException('Token and new password are required');\n    }\n    \n    if (newPassword.length < 8) {\n      throw new BadRequestException('Password must be at least 8 characters long');\n    }\n    \n    return this.authService.resetPassword(token, newPassword);\n  }\n} "],"names":["AuthController","RegisterDto","example","description","required","LoginDto","register","registerDto","logger","log","email","authService","password","name","title","gender","firstname","lastname","lastname2","dob","Date","undefined","error","message","stack","BadRequestException","login","loginDto","verifyEmail","token","forgotPassword","requestPasswordReset","resetPassword","newPassword","length","constructor","Logger","summary","status","schema","userId","accessToken","user","id","username"],"mappings":"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"}