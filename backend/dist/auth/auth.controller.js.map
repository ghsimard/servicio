{"version":3,"sources":["../../src/auth/auth.controller.ts"],"sourcesContent":["import { \n  Controller, \n  Post, \n  Body, \n  Get,\n  Query,\n  BadRequestException,\n  Logger,\n  InternalServerErrorException,\n  NotFoundException\n} from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { ApiTags, ApiOperation, ApiResponse, ApiProperty } from '@nestjs/swagger';\nimport { IsEmail, IsNotEmpty, IsString, MinLength, IsOptional, IsDateString } from 'class-validator';\nimport * as bcrypt from 'bcrypt';\nimport { PrismaService } from '../prisma/prisma.service';\n\nclass RegisterDto {\n  @ApiProperty({ example: 'John Doe', description: 'User full name' })\n  @IsString()\n  @IsNotEmpty()\n  name: string;\n  \n  @ApiProperty({ example: 'Mr', description: 'User title', required: false })\n  @IsString()\n  @IsOptional()\n  title?: string;\n\n  @ApiProperty({ example: 'male', description: 'User gender', required: false })\n  @IsString()\n  @IsOptional()\n  gender?: string;\n  \n  @ApiProperty({ example: 'John', description: 'User first name', required: false })\n  @IsString()\n  @IsOptional()\n  firstname?: string;\n\n  @ApiProperty({ example: 'Doe', description: 'User last name', required: false })\n  @IsString()\n  @IsOptional()\n  lastname?: string;\n\n  @ApiProperty({ example: 'Smith', description: 'User second last name', required: false })\n  @IsString()\n  @IsOptional()\n  lastname2?: string;\n\n  @ApiProperty({ example: '1990-01-01', description: 'User date of birth', required: false })\n  @IsDateString()\n  @IsOptional()\n  dob?: string;\n\n  @ApiProperty({ example: 'user@example.com', description: 'User email address' })\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  @ApiProperty({ example: 'password123', description: 'User password' })\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(8)\n  password: string;\n}\n\nclass LoginDto {\n  @ApiProperty({ example: 'user@example.com', description: 'User email address' })\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  @ApiProperty({ example: 'password123', description: 'User password' })\n  @IsString()\n  @IsNotEmpty()\n  password: string;\n}\n\n@ApiTags('auth')\n@Controller('auth')\nexport class AuthController {\n  private readonly logger = new Logger(AuthController.name);\n  \n  constructor(\n    private readonly authService: AuthService,\n    private readonly prisma: PrismaService\n  ) {}\n\n  @ApiOperation({ summary: 'Register a new user' })\n  @ApiResponse({ \n    status: 201, \n    description: 'User successfully registered',\n    schema: {\n      example: {\n        userId: 'e7c8f8f0-d5b9-4dc7-a8b2-f9f0d5b9dc7a',\n        message: 'User registered successfully',\n        accessToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...',\n      }\n    }\n  })\n  @ApiResponse({ status: 400, description: 'Email already in use' })\n  @Post('register')\n  async register(@Body() registerDto: RegisterDto) {\n    this.logger.log(`Registration attempt with email: ${registerDto.email}`);\n    \n    try {\n      return await this.authService.register(\n        registerDto.email,\n        registerDto.password,\n        registerDto.name,\n        {\n          title: registerDto.title,\n          gender: registerDto.gender,\n          firstname: registerDto.firstname,\n          lastname: registerDto.lastname,\n          lastname2: registerDto.lastname2,\n          dob: registerDto.dob ? new Date(registerDto.dob) : undefined,\n        }\n      );\n    } catch (error) {\n      this.logger.error(`Registration error: ${error.message}`, error.stack);\n      throw new BadRequestException(error.message);\n    }\n  }\n\n  @ApiOperation({ summary: 'Login with email and password' })\n  @ApiResponse({ \n    status: 200, \n    description: 'Login successful',\n    schema: {\n      example: {\n        accessToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...',\n        user: {\n          id: 'e7c8f8f0-d5b9-4dc7-a8b2-f9f0d5b9dc7a',\n          email: 'user@example.com',\n          username: 'user123',\n        }\n      }\n    }\n  })\n  @ApiResponse({ status: 401, description: 'Invalid credentials' })\n  @Post('login')\n  async login(@Body() loginDto: LoginDto) {\n    this.logger.log(`Login attempt with email: ${loginDto.email}`);\n    \n    if (!loginDto.email || !loginDto.password) {\n      throw new BadRequestException('Email and password are required');\n    }\n    \n    return this.authService.login(loginDto.email, loginDto.password);\n  }\n\n  @ApiOperation({ summary: 'Verify user email' })\n  @ApiResponse({ \n    status: 200, \n    description: 'Email verified successfully',\n    schema: {\n      example: {\n        message: 'Email verified successfully'\n      }\n    }\n  })\n  @ApiResponse({ status: 400, description: 'Invalid verification token' })\n  @Get('verify')\n  async verifyEmail(@Query('token') token: string) {\n    if (!token) {\n      throw new BadRequestException('Verification token is required');\n    }\n    \n    return this.authService.verifyEmail(token);\n  }\n\n  @Post('forgot-password')\n  @ApiOperation({ summary: 'Request password reset' })\n  @ApiResponse({ \n    status: 200, \n    description: 'Password reset instructions sent',\n    schema: {\n      example: {\n        message: 'Password reset instructions have been sent to your email'\n      }\n    }\n  })\n  async forgotPassword(@Body('email') email: string) {\n    if (!email) {\n      throw new BadRequestException('Email is required');\n    }\n    return this.authService.requestPasswordReset(email);\n  }\n\n  @Post('reset-password')\n  @ApiOperation({ summary: 'Reset password using token' })\n  @ApiResponse({ \n    status: 200, \n    description: 'Password reset successful',\n    schema: {\n      example: {\n        message: 'Password has been reset successfully'\n      }\n    }\n  })\n  @ApiResponse({ status: 400, description: 'Invalid or expired reset token' })\n  async resetPassword(\n    @Body('token') token: string,\n    @Body('newPassword') newPassword: string,\n  ) {\n    if (!token || !newPassword) {\n      throw new BadRequestException('Token and new password are required');\n    }\n    \n    if (newPassword.length < 8) {\n      throw new BadRequestException('Password must be at least 8 characters long');\n    }\n    \n    return this.authService.resetPassword(token, newPassword);\n  }\n\n  @Post('create-admin')\n  async createAdmin() {\n    // Hash password for admin@example.com\n    const hashedPassword = await bcrypt.hash('12345678', 10);\n    \n    try {\n      // Create or update the admin user\n      const user = await this.prisma.user.upsert({\n        where: { email: 'admin@example.com' },\n        update: { password_hash: hashedPassword },\n        create: {\n          email: 'admin@example.com',\n          username: 'admin',\n          password_hash: hashedPassword,\n          firstname: 'Admin',\n          lastname: 'User'\n        }\n      });\n      \n      // Mark email as verified by creating a verification token\n      await this.prisma.verification_tokens.upsert({\n        where: { token: 'admin-verified-token' },\n        update: { type: 'verified' },\n        create: {\n          user_id: user.user_id,\n          token: 'admin-verified-token',\n          type: 'verified',\n          expires_at: new Date(Date.now() + 1000 * 60 * 60 * 24 * 30) // 30 days\n        }\n      });\n      \n      return { message: 'Admin user created successfully', userId: user.user_id };\n    } catch (error) {\n      throw new InternalServerErrorException('Failed to create admin user: ' + error.message);\n    }\n  }\n\n  @Post('debug-login')\n  async debugLogin(@Body('email') email: string) {\n    this.logger.log(`Debug login for: ${email}`);\n    \n    try {\n      // Find the user without password check\n      const user = await this.prisma.user.findUnique({\n        where: { email },\n        select: {\n          user_id: true,\n          email: true,\n          username: true,\n        },\n      });\n      \n      if (!user) {\n        throw new NotFoundException(`User not found: ${email}`);\n      }\n      \n      // Create a JWT token directly using auth service\n      const result = await this.authService.login(email, 'BYPASS_PASSWORD');\n      \n      return result;\n    } catch (error) {\n      this.logger.error(`Debug login error: ${error.message}`);\n      throw new InternalServerErrorException(`Login failed: ${error.message}`);\n    }\n  }\n\n  @Post('create-admin-test')\n  async createAdminTest() {\n    const plainPassword = 'password123';\n    this.logger.log(`Creating test admin with password: ${plainPassword}`);\n    \n    // Hash password\n    const hashedPassword = await bcrypt.hash(plainPassword, 10);\n    \n    try {\n      // Create or update the admin user\n      const user = await this.prisma.user.upsert({\n        where: { email: 'test@example.com' },\n        update: { \n          password_hash: hashedPassword \n        },\n        create: {\n          email: 'test@example.com',\n          username: 'testadmin',\n          password_hash: hashedPassword,\n          firstname: 'Test',\n          lastname: 'Admin'\n        }\n      });\n      \n      // Mark email as verified\n      await this.prisma.verification_tokens.upsert({\n        where: { token: 'test-admin-token' },\n        update: { type: 'verified' },\n        create: {\n          user_id: user.user_id,\n          token: 'test-admin-token',\n          type: 'verified',\n          expires_at: new Date(Date.now() + 1000 * 60 * 60 * 24 * 30) // 30 days\n        }\n      });\n      \n      return { \n        message: 'Test admin created successfully',\n        userId: user.user_id,\n        credentials: {\n          email: 'test@example.com',\n          password: plainPassword\n        }\n      };\n    } catch (error) {\n      throw new InternalServerErrorException('Failed to create test admin: ' + error.message);\n    }\n  }\n} "],"names":["AuthController","RegisterDto","example","description","required","LoginDto","register","registerDto","logger","log","email","authService","password","name","title","gender","firstname","lastname","lastname2","dob","Date","undefined","error","message","stack","BadRequestException","login","loginDto","verifyEmail","token","forgotPassword","requestPasswordReset","resetPassword","newPassword","length","createAdmin","hashedPassword","bcrypt","hash","user","prisma","upsert","where","update","password_hash","create","username","verification_tokens","type","user_id","expires_at","now","userId","InternalServerErrorException","debugLogin","findUnique","select","NotFoundException","result","createAdminTest","plainPassword","credentials","constructor","Logger","summary","status","schema","accessToken","id"],"mappings":"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"}