{"version":3,"sources":["../../src/locations/locations.controller.ts"],"sourcesContent":["import { Controller, Get, Query, Logger } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { HttpService } from '@nestjs/axios';\nimport { firstValueFrom } from 'rxjs';\nimport { AxiosResponse } from 'axios';\nimport { ApiTags, ApiOperation, ApiQuery, ApiResponse } from '@nestjs/swagger';\n\ninterface GooglePrediction {\n  description: string;\n  place_id: string;\n  [key: string]: string | Record<string, unknown>;\n}\n\ninterface GooglePlacesResponse {\n  predictions: GooglePrediction[];\n  status: string;\n  error_message?: string;\n}\n\ninterface GoogleGeocodeResponse {\n  results: Array<{\n    formatted_address: string;\n    address_components: Array<{\n      long_name: string;\n      short_name: string;\n      types: string[];\n    }>;\n  }>;\n  status: string;\n  error_message?: string;\n}\n\n@ApiTags('locations')\n@Controller('locations')\nexport class LocationsController {\n  private readonly logger = new Logger(LocationsController.name);\n\n  constructor(\n    private readonly httpService: HttpService,\n    private readonly configService: ConfigService,\n  ) {}\n\n  @Get('autocomplete')\n  @ApiOperation({ summary: 'Get location autocomplete suggestions' })\n  @ApiQuery({ name: 'input', required: true, description: 'Search input string' })\n  @ApiQuery({ name: 'types', required: false, description: 'Place types to search for' })\n  @ApiResponse({ status: 200, description: 'List of location suggestions' })\n  async getLocationAutocomplete(\n    @Query('input') input: string,\n    @Query('types') types: string,\n  ) {\n    this.logger.log(`Received location autocomplete request for: \"${input}\", types: \"${types}\"`);\n\n    const apiKey = this.configService.get<string>('GOOGLE_MAPS_API_KEY');\n    \n    if (!apiKey) {\n      this.logger.warn('Google Maps API key not configured, returning empty results');\n      return { \n        predictions: [],\n        error: 'Google Maps API key not configured' \n      };\n    }\n    \n    try {\n      this.logger.log(`Making request to Google Places API for: \"${input}\"`);\n      const response = await firstValueFrom(\n        this.httpService.get<GooglePlacesResponse>(\n          'https://maps.googleapis.com/maps/api/place/autocomplete/json',\n          {\n            params: {\n              input,\n              // Use 'geocode' type instead of '(cities)' to get address results\n              types: 'geocode',\n              // Include both US and Canada results\n              components: 'country:us|country:ca',\n              key: apiKey,\n            },\n          }\n        )\n      );\n      const data = response.data;\n\n      // Check for API errors\n      if (data.status !== 'OK' && data.status !== 'ZERO_RESULTS') {\n        this.logger.error(`Google Places API error: ${data.status}${data.error_message ? ' - ' + data.error_message : ''}`);\n        return {\n          predictions: [],\n          error: `API Error: ${data.status}${data.error_message ? ' - ' + data.error_message : ''}`,\n          status: data.status\n        };\n      }\n\n      this.logger.log(`Received ${data.predictions?.length || 0} results from Google Places API`);\n      return {\n        predictions: data.predictions?.map(prediction => ({\n          description: prediction.description,\n          place_id: prediction.place_id,\n        })) || [],\n      };\n    } catch (error) {\n      this.logger.error(`Error fetching location autocomplete: ${error instanceof Error ? error.message : 'Unknown error'}`, error instanceof Error ? error.stack : '');\n      return { \n        predictions: [],\n        error: 'Failed to fetch location suggestions',\n        details: error instanceof Error ? error.message : 'Unknown error'\n      };\n    }\n  }\n\n  @Get('reverse-geocode')\n  @ApiOperation({ summary: 'Get address from latitude and longitude' })\n  @ApiQuery({ name: 'lat', required: true, description: 'Latitude' })\n  @ApiQuery({ name: 'lng', required: true, description: 'Longitude' })\n  @ApiResponse({ status: 200, description: 'Address information' })\n  async reverseGeocode(\n    @Query('lat') lat: string,\n    @Query('lng') lng: string,\n  ) {\n    this.logger.log(`Received reverse geocoding request for coordinates: ${lat}, ${lng}`);\n\n    // Validate coordinates\n    const latitude = parseFloat(lat);\n    const longitude = parseFloat(lng);\n\n    if (isNaN(latitude) || isNaN(longitude)) {\n      this.logger.error('Invalid coordinates provided');\n      return {\n        error: 'Invalid coordinates provided',\n        details: 'Latitude and longitude must be valid numbers'\n      };\n    }\n\n    if (latitude < -90 || latitude > 90 || longitude < -180 || longitude > 180) {\n      this.logger.error('Coordinates out of valid range');\n      return {\n        error: 'Invalid coordinates',\n        details: 'Coordinates are outside the valid range'\n      };\n    }\n\n    const apiKey = this.configService.get<string>('GOOGLE_MAPS_API_KEY');\n    \n    if (!apiKey) {\n      this.logger.warn('Google Maps API key not configured');\n      return { \n        error: 'Google Maps API key not configured'\n      };\n    }\n    \n    try {\n      this.logger.log('Making request to Google Geocoding API');\n      const response = await firstValueFrom(\n        this.httpService.get<GoogleGeocodeResponse>(\n          'https://maps.googleapis.com/maps/api/geocode/json',\n          {\n            params: {\n              latlng: `${latitude},${longitude}`,\n              key: apiKey,\n              language: 'en', // Ensure we get results in English\n              result_type: 'street_address|route|locality|sublocality|postal_code', // Get more precise results\n            },\n          }\n        )\n      );\n      \n      const data = response.data;\n      this.logger.debug('Google Geocoding API response:', data);\n\n      if (data.status !== 'OK' || !data.results?.length) {\n        this.logger.error(`Google Geocoding API error: ${data.status}${data.error_message ? ' - ' + data.error_message : ''}`);\n        return {\n          error: 'Could not get address from your location',\n          status: data.status,\n          details: data.error_message || 'No results found for these coordinates'\n        };\n      }\n\n      // Get the most detailed address from the results\n      const result = data.results[0];\n      const address = result.formatted_address;\n      \n      this.logger.log(`Successfully reverse geocoded to address: ${address}`);\n      return {\n        address,\n        status: 'OK',\n        components: result.address_components\n      };\n    } catch (error) {\n      this.logger.error('Error reverse geocoding:', error);\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n      this.logger.error('Detailed error:', errorMessage);\n      \n      return {\n        error: 'Could not get address from your location',\n        details: errorMessage,\n        status: 'ERROR'\n      };\n    }\n  }\n} "],"names":["LocationsController","getLocationAutocomplete","input","types","logger","log","apiKey","configService","get","warn","predictions","error","response","firstValueFrom","httpService","params","components","key","data","status","error_message","length","map","prediction","description","place_id","Error","message","stack","details","reverseGeocode","lat","lng","latitude","parseFloat","longitude","isNaN","latlng","language","result_type","debug","results","result","address","formatted_address","address_components","errorMessage","constructor","Logger","name","summary","required"],"mappings":"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"}