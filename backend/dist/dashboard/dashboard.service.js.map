{"version":3,"sources":["../../src/dashboard/dashboard.service.ts"],"sourcesContent":["import { Injectable, NotFoundException, BadRequestException } from '@nestjs/common';\nimport { PrismaService } from '../prisma/prisma.service';\n\n@Injectable()\nexport class DashboardService {\n  constructor(private prisma: PrismaService) {}\n\n  async getDashboardData(userId: string) {\n    // Get user info\n    const user = await this.prisma.user.findUnique({\n      where: { user_id: userId }\n    });\n\n    if (!user) {\n      return { message: 'User not found' };\n    }\n    \n    // Basic welcome message\n    return {\n      message: `Welcome to your Servicio dashboard`,\n      userName: user.username\n    };\n  }\n\n  async getUserProfile(userId: string) {\n    const user = await this.prisma.user.findUnique({\n      where: { user_id: userId }\n    });\n\n    if (!user) {\n      throw new NotFoundException('User not found');\n    }\n\n    // Return user profile data\n    return {\n      id: user.user_id,\n      username: user.username,\n      email: user.email,\n      preferredLanguage: user.preferred_language,\n      profilePhotoUrl: user.profile_photo_url\n    };\n  }\n\n  async updateUserProfile(userId: string, updateData: any) {\n    // Verify user exists\n    const existingUser = await this.prisma.user.findUnique({\n      where: { user_id: userId }\n    });\n\n    if (!existingUser) {\n      throw new NotFoundException('User not found');\n    }\n\n    // Check if username already exists (if username is being updated)\n    if (updateData.username && updateData.username !== existingUser.username) {\n      const usernameExists = await this.prisma.user.findFirst({\n        where: {\n          username: {\n            equals: updateData.username,\n            mode: 'insensitive'\n          },\n          user_id: {\n            not: userId\n          }\n        }\n      });\n\n      if (usernameExists) {\n        throw new BadRequestException('Username already taken');\n      }\n    }\n\n    // Update user profile\n    try {\n      const updatedUser = await this.prisma.user.update({\n        where: { user_id: userId },\n        data: {\n          username: updateData.username,\n          preferred_language: updateData.preferredLanguage,\n          profile_photo_url: updateData.profilePhotoUrl\n        }\n      });\n\n      return {\n        id: updatedUser.user_id,\n        username: updatedUser.username,\n        email: updatedUser.email,\n        preferredLanguage: updatedUser.preferred_language,\n        profilePhotoUrl: updatedUser.profile_photo_url\n      };\n    } catch (error) {\n      throw new BadRequestException('Failed to update profile: ' + error.message);\n    }\n  }\n} "],"names":["DashboardService","getDashboardData","userId","user","prisma","findUnique","where","user_id","message","userName","username","getUserProfile","NotFoundException","id","email","preferredLanguage","preferred_language","profilePhotoUrl","profile_photo_url","updateUserProfile","updateData","existingUser","usernameExists","findFirst","equals","mode","not","BadRequestException","updatedUser","update","data","error","constructor"],"mappings":";;;;+BAIaA;;;eAAAA;;;wBAJsD;+BACrC;;;;;;;;;;AAGvB,IAAA,AAAMA,mBAAN,MAAMA;IAGX,MAAMC,iBAAiBC,MAAc,EAAE;QACrC,gBAAgB;QAChB,MAAMC,OAAO,MAAM,IAAI,CAACC,MAAM,CAACD,IAAI,CAACE,UAAU,CAAC;YAC7CC,OAAO;gBAAEC,SAASL;YAAO;QAC3B;QAEA,IAAI,CAACC,MAAM;YACT,OAAO;gBAAEK,SAAS;YAAiB;QACrC;QAEA,wBAAwB;QACxB,OAAO;YACLA,SAAS,CAAC,kCAAkC,CAAC;YAC7CC,UAAUN,KAAKO,QAAQ;QACzB;IACF;IAEA,MAAMC,eAAeT,MAAc,EAAE;QACnC,MAAMC,OAAO,MAAM,IAAI,CAACC,MAAM,CAACD,IAAI,CAACE,UAAU,CAAC;YAC7CC,OAAO;gBAAEC,SAASL;YAAO;QAC3B;QAEA,IAAI,CAACC,MAAM;YACT,MAAM,IAAIS,yBAAiB,CAAC;QAC9B;QAEA,2BAA2B;QAC3B,OAAO;YACLC,IAAIV,KAAKI,OAAO;YAChBG,UAAUP,KAAKO,QAAQ;YACvBI,OAAOX,KAAKW,KAAK;YACjBC,mBAAmBZ,KAAKa,kBAAkB;YAC1CC,iBAAiBd,KAAKe,iBAAiB;QACzC;IACF;IAEA,MAAMC,kBAAkBjB,MAAc,EAAEkB,UAAe,EAAE;QACvD,qBAAqB;QACrB,MAAMC,eAAe,MAAM,IAAI,CAACjB,MAAM,CAACD,IAAI,CAACE,UAAU,CAAC;YACrDC,OAAO;gBAAEC,SAASL;YAAO;QAC3B;QAEA,IAAI,CAACmB,cAAc;YACjB,MAAM,IAAIT,yBAAiB,CAAC;QAC9B;QAEA,kEAAkE;QAClE,IAAIQ,WAAWV,QAAQ,IAAIU,WAAWV,QAAQ,KAAKW,aAAaX,QAAQ,EAAE;YACxE,MAAMY,iBAAiB,MAAM,IAAI,CAAClB,MAAM,CAACD,IAAI,CAACoB,SAAS,CAAC;gBACtDjB,OAAO;oBACLI,UAAU;wBACRc,QAAQJ,WAAWV,QAAQ;wBAC3Be,MAAM;oBACR;oBACAlB,SAAS;wBACPmB,KAAKxB;oBACP;gBACF;YACF;YAEA,IAAIoB,gBAAgB;gBAClB,MAAM,IAAIK,2BAAmB,CAAC;YAChC;QACF;QAEA,sBAAsB;QACtB,IAAI;YACF,MAAMC,cAAc,MAAM,IAAI,CAACxB,MAAM,CAACD,IAAI,CAAC0B,MAAM,CAAC;gBAChDvB,OAAO;oBAAEC,SAASL;gBAAO;gBACzB4B,MAAM;oBACJpB,UAAUU,WAAWV,QAAQ;oBAC7BM,oBAAoBI,WAAWL,iBAAiB;oBAChDG,mBAAmBE,WAAWH,eAAe;gBAC/C;YACF;YAEA,OAAO;gBACLJ,IAAIe,YAAYrB,OAAO;gBACvBG,UAAUkB,YAAYlB,QAAQ;gBAC9BI,OAAOc,YAAYd,KAAK;gBACxBC,mBAAmBa,YAAYZ,kBAAkB;gBACjDC,iBAAiBW,YAAYV,iBAAiB;YAChD;QACF,EAAE,OAAOa,OAAO;YACd,MAAM,IAAIJ,2BAAmB,CAAC,+BAA+BI,MAAMvB,OAAO;QAC5E;IACF;IAxFAwB,YAAY,AAAQ5B,MAAqB,CAAE;aAAvBA,SAAAA;IAAwB;AAyF9C"}