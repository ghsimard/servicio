
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  userId: 'userId',
  firstname: 'firstname',
  lastname: 'lastname',
  lastname2: 'lastname2',
  dob: 'dob',
  username: 'username',
  email: 'email',
  passwordHash: 'passwordHash',
  preferred_language: 'preferred_language',
  profile_photo_url: 'profile_photo_url',
  subscription_id: 'subscription_id',
  company_id: 'company_id',
  primary_address_id: 'primary_address_id',
  certification_status: 'certification_status',
  last_certified_at: 'last_certified_at',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  gender: 'gender',
  title: 'title'
};

exports.Prisma.ServiceScalarFieldEnum = {
  serviceId: 'serviceId',
  parentServiceId: 'parentServiceId',
  level: 'level',
  nameEn: 'nameEn',
  nameFr: 'nameFr',
  nameEs: 'nameEs',
  isActive: 'isActive',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.HelperServiceScalarFieldEnum = {
  helperServiceId: 'helperServiceId',
  user_id: 'user_id',
  serviceId: 'serviceId',
  address_id: 'address_id',
  active_campaign_id: 'active_campaign_id',
  price: 'price',
  availability: 'availability',
  location_type: 'location_type',
  location_details: 'location_details',
  listing_photo_url: 'listing_photo_url',
  gallery_id: 'gallery_id',
  visibility: 'visibility',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BookingScalarFieldEnum = {
  bookingId: 'bookingId',
  neederId: 'neederId',
  helperServiceId: 'helperServiceId',
  deliveryAddressId: 'deliveryAddressId',
  queue_position: 'queue_position',
  campaignId: 'campaignId',
  startTime: 'startTime',
  endTime: 'endTime',
  status: 'status',
  commission: 'commission',
  transactionId: 'transactionId',
  neederConfirmed: 'neederConfirmed',
  helperConfirmed: 'helperConfirmed',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AddressScalarFieldEnum = {
  addressId: 'addressId',
  entityType: 'entityType',
  entityId: 'entityId',
  street: 'street',
  city: 'city',
  state: 'state',
  postalCode: 'postalCode',
  country: 'country',
  latitude: 'latitude',
  longitude: 'longitude',
  isPrimary: 'isPrimary',
  visibility: 'visibility',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ReviewScalarFieldEnum = {
  reviewId: 'reviewId',
  bookingId: 'bookingId',
  rating: 'rating',
  comment: 'comment',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MessageScalarFieldEnum = {
  messageId: 'messageId',
  senderId: 'senderId',
  receiver_id: 'receiver_id',
  bookingId: 'bookingId',
  content: 'content',
  sent_at: 'sent_at',
  read: 'read',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CampaignScalarFieldEnum = {
  campaignId: 'campaignId',
  user_id: 'user_id',
  campaign_type: 'campaign_type',
  entity_type: 'entity_type',
  entity_id: 'entity_id',
  start_date: 'start_date',
  end_date: 'end_date',
  cost: 'cost',
  status: 'status',
  details: 'details',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TransactionScalarFieldEnum = {
  transactionId: 'transactionId',
  bookingId: 'bookingId',
  invoice_id: 'invoice_id',
  needer_id: 'needer_id',
  helper_id: 'helper_id',
  total_amount: 'total_amount',
  commission_amount: 'commission_amount',
  helper_amount: 'helper_amount',
  service_fee: 'service_fee',
  currency: 'currency',
  helper_location_id: 'helper_location_id',
  needer_location_id: 'needer_location_id',
  status: 'status',
  payment_method: 'payment_method',
  payment_details: 'payment_details',
  needer_confirmed: 'needer_confirmed',
  helper_confirmed: 'helper_confirmed',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  completed_at: 'completed_at'
};

exports.Prisma.ContractScalarFieldEnum = {
  contractId: 'contractId',
  bookingId: 'bookingId',
  needer_id: 'needer_id',
  helper_id: 'helper_id',
  contract_type: 'contract_type',
  status: 'status',
  contract_url: 'contract_url',
  signed_at: 'signed_at',
  expires_at: 'expires_at',
  terms: 'terms',
  signature_needer: 'signature_needer',
  signature_helper: 'signature_helper',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.InvoiceScalarFieldEnum = {
  invoiceId: 'invoiceId',
  bookingId: 'bookingId',
  needer_id: 'needer_id',
  helper_id: 'helper_id',
  total_amount: 'total_amount',
  commission_amount: 'commission_amount',
  helper_amount: 'helper_amount',
  service_fee: 'service_fee',
  total_taxes: 'total_taxes',
  currency: 'currency',
  status: 'status',
  issued_at: 'issued_at',
  due_date: 'due_date',
  paid_at: 'paid_at',
  invoice_url: 'invoice_url',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RfpScalarFieldEnum = {
  rfpId: 'rfpId',
  needer_id: 'needer_id',
  title: 'title',
  serviceId: 'serviceId',
  details: 'details',
  expiration_date: 'expiration_date',
  status: 'status',
  payment_status: 'payment_status',
  price: 'price',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.HelpersScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  phone: 'phone',
  businessName: 'businessName',
  services: 'services',
  yearsOfExperience: 'yearsOfExperience',
  age: 'age',
  languages: 'languages',
  rating: 'rating',
  gender: 'gender',
  certified: 'certified',
  latitude: 'latitude',
  longitude: 'longitude',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.Admin_settingsScalarFieldEnum = {
  setting_id: 'setting_id',
  key: 'key',
  value: 'value',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Certification_proofsScalarFieldEnum = {
  proof_id: 'proof_id',
  certification_id: 'certification_id',
  file_type: 'file_type',
  file_url: 'file_url',
  file_name: 'file_name',
  uploaded_at: 'uploaded_at',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.CompaniesScalarFieldEnum = {
  company_id: 'company_id',
  name: 'name',
  description: 'description',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Content_moderationScalarFieldEnum = {
  moderation_id: 'moderation_id',
  user_id: 'user_id',
  content_type: 'content_type',
  entity_type: 'entity_type',
  entity_id: 'entity_id',
  content_value: 'content_value',
  ia_score: 'ia_score',
  ia_status: 'ia_status',
  admin_status: 'admin_status',
  moderation_comments: 'moderation_comments',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Database_logsScalarFieldEnum = {
  log_id: 'log_id',
  user_id: 'user_id',
  table_name: 'table_name',
  action: 'action',
  record_id: 'record_id',
  details: 'details',
  operation_details: 'operation_details',
  timestamp: 'timestamp'
};

exports.Prisma.Exchange_ratesScalarFieldEnum = {
  exchange_rate_id: 'exchange_rate_id',
  from_currency: 'from_currency',
  to_currency: 'to_currency',
  rate: 'rate',
  effective_date: 'effective_date',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.ExportsScalarFieldEnum = {
  export_id: 'export_id',
  user_id: 'user_id',
  entity_type: 'entity_type',
  entity_id: 'entity_id',
  file_type: 'file_type',
  file_url: 'file_url',
  created_at: 'created_at',
  updated_at: 'updated_at',
  downloaded: 'downloaded'
};

exports.Prisma.Helper_certificationsScalarFieldEnum = {
  certification_id: 'certification_id',
  helper_id: 'helper_id',
  admin_id: 'admin_id',
  status: 'status',
  evaluation_date: 'evaluation_date',
  evaluation_comments: 'evaluation_comments',
  proof_required: 'proof_required',
  start_date: 'start_date',
  end_date: 'end_date',
  is_visible: 'is_visible',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Realtime_locationsScalarFieldEnum = {
  location_id: 'location_id',
  user_id: 'user_id',
  latitude: 'latitude',
  longitude: 'longitude',
  timestamp: 'timestamp',
  campaign_id: 'campaign_id'
};

exports.Prisma.Rfp_notificationsScalarFieldEnum = {
  notification_id: 'notification_id',
  rfp_id: 'rfp_id',
  helper_id: 'helper_id',
  sent_at: 'sent_at',
  read: 'read',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.SubscriptionsScalarFieldEnum = {
  subscription_id: 'subscription_id',
  needer_id: 'needer_id',
  plan_type: 'plan_type',
  start_date: 'start_date',
  end_date: 'end_date',
  features: 'features',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Tax_remittancesScalarFieldEnum = {
  remittance_id: 'remittance_id',
  tax_rule_id: 'tax_rule_id',
  total_amount: 'total_amount',
  currency: 'currency',
  period_start: 'period_start',
  period_end: 'period_end',
  remitted_at: 'remitted_at',
  status: 'status',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Tax_rulesScalarFieldEnum = {
  tax_rule_id: 'tax_rule_id',
  jurisdiction_type: 'jurisdiction_type',
  jurisdiction_code: 'jurisdiction_code',
  sector_code: 'sector_code',
  tax_name: 'tax_name',
  tax_rate: 'tax_rate',
  applies_to: 'applies_to',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Transaction_taxesScalarFieldEnum = {
  transaction_tax_id: 'transaction_tax_id',
  transaction_id: 'transaction_id',
  tax_rule_id: 'tax_rule_id',
  amount: 'amount',
  taxable_amount: 'taxable_amount',
  currency: 'currency',
  collected_from: 'collected_from',
  status: 'status',
  remitted_at: 'remitted_at',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.TranslationsScalarFieldEnum = {
  translation_id: 'translation_id',
  entity_type: 'entity_type',
  entity_id: 'entity_id',
  language: 'language',
  translated_text: 'translated_text',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.User_contactsScalarFieldEnum = {
  contact_id: 'contact_id',
  user_id: 'user_id',
  contact_type: 'contact_type',
  contact_value: 'contact_value',
  extension: 'extension',
  label: 'label',
  is_verified: 'is_verified',
  visibility: 'visibility',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.User_rolesScalarFieldEnum = {
  user_role_id: 'user_role_id',
  user_id: 'user_id',
  role: 'role',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Verification_tokensScalarFieldEnum = {
  token_id: 'token_id',
  user_id: 'user_id',
  token: 'token',
  type: 'type',
  expires_at: 'expires_at',
  created_at: 'created_at'
};

exports.Prisma.User_sessionsScalarFieldEnum = {
  session_id: 'session_id',
  user_id: 'user_id',
  ip_address: 'ip_address',
  user_agent: 'user_agent',
  device_type: 'device_type',
  browser: 'browser',
  os: 'os',
  login_time: 'login_time',
  logout_time: 'logout_time',
  duration: 'duration',
  is_active: 'is_active',
  created_at: 'created_at',
  updated_at: 'updated_at',
  session_type: 'session_type'
};

exports.Prisma.User_analyticsScalarFieldEnum = {
  analytics_id: 'analytics_id',
  user_id: 'user_id',
  session_id: 'session_id',
  page_visited: 'page_visited',
  action_type: 'action_type',
  action_data: 'action_data',
  timestamp: 'timestamp',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.certification_status_type = exports.$Enums.certification_status_type = {
  uncertified: 'uncertified',
  certified: 'certified',
  revoked: 'revoked'
};

exports.location_type = exports.$Enums.location_type = {
  international: 'international',
  country: 'country',
  state: 'state',
  city: 'city',
  neighborhood: 'neighborhood'
};

exports.booking_status = exports.$Enums.booking_status = {
  pending: 'pending',
  confirmed: 'confirmed',
  completed: 'completed',
  canceled: 'canceled'
};

exports.entity_type = exports.$Enums.entity_type = {
  user: 'user',
  helper_service: 'helper_service',
  booking: 'booking',
  rfp: 'rfp'
};

exports.campaign_type = exports.$Enums.campaign_type = {
  promotion: 'promotion',
  certification_marker: 'certification_marker',
  priority_bump: 'priority_bump',
  motivated_helper: 'motivated_helper',
  highlighted: 'highlighted',
  expanded_market: 'expanded_market',
  extra_services: 'extra_services',
  realtime_location: 'realtime_location',
  queue_system: 'queue_system'
};

exports.campaign_status = exports.$Enums.campaign_status = {
  active: 'active',
  expired: 'expired',
  pending_payment: 'pending_payment'
};

exports.transaction_status = exports.$Enums.transaction_status = {
  pending: 'pending',
  held: 'held',
  completed: 'completed',
  disputed: 'disputed',
  canceled: 'canceled'
};

exports.payment_method = exports.$Enums.payment_method = {
  credit_card: 'credit_card',
  bank_transfer: 'bank_transfer',
  crypto: 'crypto',
  paypal: 'paypal'
};

exports.contract_type = exports.$Enums.contract_type = {
  service: 'service',
  subscription: 'subscription',
  custom: 'custom'
};

exports.contract_status = exports.$Enums.contract_status = {
  draft: 'draft',
  sent: 'sent',
  signed: 'signed',
  rejected: 'rejected',
  expired: 'expired'
};

exports.invoice_status = exports.$Enums.invoice_status = {
  draft: 'draft',
  sent: 'sent',
  paid: 'paid',
  overdue: 'overdue',
  canceled: 'canceled'
};

exports.rfp_status = exports.$Enums.rfp_status = {
  active: 'active',
  expired: 'expired',
  completed: 'completed',
  canceled: 'canceled'
};

exports.payment_status = exports.$Enums.payment_status = {
  pending: 'pending',
  paid: 'paid',
  free: 'free'
};

exports.proof_file_type = exports.$Enums.proof_file_type = {
  image: 'image',
  pdf: 'pdf',
  other: 'other'
};

exports.moderation_type = exports.$Enums.moderation_type = {
  image: 'image',
  text: 'text'
};

exports.moderation_entity_type = exports.$Enums.moderation_entity_type = {
  account_photo: 'account_photo',
  listing_photo: 'listing_photo',
  certification_proof: 'certification_proof',
  rfp: 'rfp',
  review: 'review',
  message: 'message',
  portfolio_photo: 'portfolio_photo',
  gallery_photo: 'gallery_photo'
};

exports.moderation_status = exports.$Enums.moderation_status = {
  approved: 'approved',
  rejected: 'rejected',
  pending: 'pending'
};

exports.action_type = exports.$Enums.action_type = {
  insert: 'insert',
  update: 'update',
  delete: 'delete'
};

exports.file_type = exports.$Enums.file_type = {
  pdf: 'pdf',
  docx: 'docx',
  csv: 'csv'
};

exports.cert_status = exports.$Enums.cert_status = {
  pending: 'pending',
  approved: 'approved',
  rejected: 'rejected',
  revoked: 'revoked'
};

exports.plan_type = exports.$Enums.plan_type = {
  free: 'free',
  premium: 'premium',
  enterprise: 'enterprise'
};

exports.remittance_status = exports.$Enums.remittance_status = {
  pending: 'pending',
  remitted: 'remitted'
};

exports.jurisdiction_type = exports.$Enums.jurisdiction_type = {
  municipal: 'municipal',
  provincial: 'provincial',
  federal: 'federal',
  sector_specific: 'sector_specific'
};

exports.applies_to_type = exports.$Enums.applies_to_type = {
  service_price: 'service_price',
  platform_commission: 'platform_commission',
  service_fee: 'service_fee',
  all: 'all'
};

exports.tax_status = exports.$Enums.tax_status = {
  pending: 'pending',
  collected: 'collected',
  remitted: 'remitted'
};

exports.translation_entity_type = exports.$Enums.translation_entity_type = {
  service: 'service',
  company: 'company',
  ui_element: 'ui_element',
  field_label: 'field_label',
  tooltip: 'tooltip',
  title: 'title',
  dropdown_value: 'dropdown_value',
  button: 'button',
  calendar: 'calendar'
};

exports.contact_type = exports.$Enums.contact_type = {
  fax: 'fax',
  mobile: 'mobile',
  iphone: 'iphone',
  home: 'home',
  work: 'work',
  other_phone: 'other_phone',
  custom_phone: 'custom_phone',
  email_personal: 'email_personal',
  email_work: 'email_work',
  email_other: 'email_other',
  facebook: 'facebook',
  linkedin: 'linkedin',
  twitter: 'twitter',
  instagram: 'instagram',
  custom_social: 'custom_social'
};

exports.role_type = exports.$Enums.role_type = {
  needer: 'needer',
  helper: 'helper',
  admin: 'admin'
};

exports.Prisma.ModelName = {
  User: 'User',
  Service: 'Service',
  HelperService: 'HelperService',
  Booking: 'Booking',
  Address: 'Address',
  Review: 'Review',
  Message: 'Message',
  Campaign: 'Campaign',
  Transaction: 'Transaction',
  Contract: 'Contract',
  Invoice: 'Invoice',
  Rfp: 'Rfp',
  Helpers: 'Helpers',
  admin_settings: 'admin_settings',
  certification_proofs: 'certification_proofs',
  companies: 'companies',
  content_moderation: 'content_moderation',
  database_logs: 'database_logs',
  exchange_rates: 'exchange_rates',
  exports: 'exports',
  helper_certifications: 'helper_certifications',
  realtime_locations: 'realtime_locations',
  rfp_notifications: 'rfp_notifications',
  subscriptions: 'subscriptions',
  tax_remittances: 'tax_remittances',
  tax_rules: 'tax_rules',
  transaction_taxes: 'transaction_taxes',
  translations: 'translations',
  user_contacts: 'user_contacts',
  user_roles: 'user_roles',
  verification_tokens: 'verification_tokens',
  user_sessions: 'user_sessions',
  user_analytics: 'user_analytics'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
